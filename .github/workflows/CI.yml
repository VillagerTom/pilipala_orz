name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
      - 'alpha'
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.github/**'
      - '.idea/**'
      - '!.github/workflows/**'

jobs:
  set-version:
    name: 设定版本号
    runs-on: ubuntu-latest
    steps:
      - name: 代码签出
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
      
      - name: 获取发行版本号
        id: get-release-version
        run: |
          # Get version number from pubspec.yaml
          version=$(grep '^version' ./pubspec.yaml | cut -f 2 -d ' ' | cut -f 1 -d '+')
          echo "version=$version" >> $GITHUB_OUTPUT
      
      - name: 确定预发行阶段
        id: get-prerelease-stage
        run: |
          #branch=$(git rev-parse --abbrev-ref HEAD)
          branch=${{ github.ref_name }}
          if [[ "$branch" == "main" ]]; then
            stage=beta
          elif [[ "$branch" == "alpha" ]]; then
            stage=alpha
          else
            echo "Action is triggered on an unexpected branch!"
            exit 1
          fi
          echo "stage=$stage" >> $GITHUB_OUTPUT
      
      - name: 获取构建号
        id: get-build-num
        run: |
          prerelease_stage=${{ steps.get-prerelease-stage.outputs.stage }}
          version=${{ steps.get-release-version.outputs.version }}
          tag=$(git tag --sort -v:refname | grep "$prerelease_stage" -m 1 || true)
          if (echo x$tag | grep -q $version); then
            build_num=$(echo $tag | cut -d "-" -f 2 | cut -d "." -f 2)
          else
            build_num=0
          fi
          let ++build_num
          echo "num=$build_num" >> $GITHUB_OUTPUT
      
      - name: 拼接版本号
        id: new-version
        run: |
          version=${{ steps.get-release-version.outputs.version }}
          prerelease_stage=${{ steps.get-prerelease-stage.outputs.stage }}
          build_num=${{ steps.get-build-num.outputs.num }}
          new_version=$version-$prerelease_stage.$build_num
          echo "version=$new_version" >> $GITHUB_OUTPUT

    outputs:
      version: ${{ steps.new-version.outputs.version }}

  android: 
    name: Build CI (Android)
    needs: set-version
    runs-on: ubuntu-latest

    steps:
      - name: 代码签出
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}

      - name: 构建Java环境
        uses: actions/setup-java@v3
        with:
            distribution: "zulu"
            java-version: "17"
            token: ${{secrets.GIT_TOKEN}}

      - name: 检查缓存
        uses: actions/cache@v2
        id: cache-flutter
        with:
            path: /root/flutter-sdk
            key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}

      - name: 安装Flutter
        if: steps.cache-flutter.outputs.cache-hit != 'true'
        uses: subosito/flutter-action@v2
        with:
            flutter-version: 3.16.5
            channel: any

      - name: 下载项目依赖
        run: flutter pub get

      - name: 解码生成 jks
        run: echo $KEYSTORE_BASE64 | base64 -di > android/app/vvex.jks
        env:
            KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

      - name: flutter build apk
        run: flutter build apk --release --split-per-abi
        env:
            KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
            KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
            KEY_PASSWORD: ${{ secrets.KEY_PASSWORD}}

      - name: 重命名应用
        run: |
          for file in build/app/outputs/flutter-apk/app-*.apk; do
            if [[ $file =~ app-(.?*)release.apk ]]; then
              new_file_name="build/app/outputs/flutter-apk/Pili-${BASH_REMATCH[1]}${{ needs.set-version.outputs.version }}.apk"
              mv "$file" "$new_file_name"
            fi
          done

      - name: 上传
        uses: actions/upload-artifact@v3
        with:
          name: Pilipala-CI
          path: |
            build/app/outputs/flutter-apk/Pili-*.apk

  iOS:
    name: Build CI (iOS)
    needs: set-version
    runs-on: macos-latest

    steps:
      - name: 代码签出
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: 检查缓存
        uses: actions/cache@v2
        id: cache-flutter
        with:
            path: /root/flutter-sdk
            key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}

      - name: 安装Flutter
        if: steps.cache-flutter.outputs.cache-hit != 'true'
        uses: subosito/flutter-action@v2.10.0
        with:
          cache: true
          flutter-version: 3.16.5

      - name: flutter build ipa
        run: |
          flutter build ios --release --no-codesign 
          ln -sf ./build/ios/iphoneos Payload
          zip -r9 app.ipa Payload/runner.app

      - name: 重命名应用
        run: |
          DATE=${{ steps.date.outputs.date }}
          for file in app.ipa; do
            new_file_name="build/Pili-${{ needs.set-version.outputs.version }}.ipa"
            mv "$file" "$new_file_name"
          done

      - name: 上传
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: Pilipala-CI
          path: |
            build/Pili-*.ipa

  upload:
    runs-on: ubuntu-latest

    needs:
      - android
      - iOS
      - set-version

    steps:

      - uses: actions/download-artifact@v3
        with:
          name: Pilipala-CI
          path: ./Pilipala-CI
          
      - name: Upload Pre-release
        uses: ncipollo/release-action@v1
        with:
          name: v${{ needs.set-version.outputs.version }}
          token: ${{ secrets.GIT_TOKEN }}
          commit: main
          tag: v${{ needs.set-version.outputs.version }}
          prerelease: true
          allowUpdates: true
          artifacts: Pilipala-CI/*
